#!/usr/bin/env jython

import sys


# Todo: make sure that this points to the correct location
libs = [
    "../lib/javaplex.jar"
    ]
for s in libs:
    sys.path.append(s)

import org.appliedtopology.tda4j
import org.appliedtopology.tda4j.api
import org.appliedtopology.tda4j.examples
import org.appliedtopology.tda4j.io

## Cellular Sphere

dimension = 100

# get the cellular sphere of the specified dimension
stream = org.appliedtopology.tda4j.examples.CellStreamExamples.getCellularSphere(dimension)

# get the total number of simplices in the complex
size = stream.getSize()

Z2_persistence = org.appliedtopology.tda4j.api.Plex4.getModularCellularAlgorithm(dimension + 1, 2)

# compute and print the intervals
intervals = Z2_persistence.computeIntervals(stream)

print "Computed intervals for cellular sphere:\n%s" % repr(intervals)


## Klein Bottle

# get the cellular sphere of the specified dimension
stream = org.appliedtopology.tda4j.examples.CellStreamExamples.getCellularKleinBottle()

# get the total number of simplices in the complex
size = stream.getSize()

# get cellular homology algorithm over Z/2Z
Z2_persistence = org.appliedtopology.tda4j.api.Plex4.getModularCellularAlgorithm(dimension + 1, 2)
# get cellular homology algorithm over Z/3Z
Z3_persistence = org.appliedtopology.tda4j.api.Plex4.getModularCellularAlgorithm(dimension + 1, 3)
# get cellular homology algorithm over Q
Q_persistence = org.appliedtopology.tda4j.api.Plex4.getRationalCellularAlgorithm(dimension + 1)

# compute over Z/2Z - should give (1, 2, 1)
Z2_intervals = Z2_persistence.computeIntervals(stream)

# compute over Z/3Z - should give (1, 1, 0)
Z3_intervals = Z3_persistence.computeIntervals(stream)

# compute over Q - should give (1, 1, 0)
Q_intervals = Q_persistence.computeIntervals(stream)


print "Computed intervals for Klein bottle (over Z/2Z):\n%s" % repr(Z2_intervals)
print "Computed intervals for Klein bottle (over Z/3Z):\n%s" % repr(Z3_intervals)
print "Computed intervals for Klein bottle (over Q):\n%s" % repr(Q_intervals)
